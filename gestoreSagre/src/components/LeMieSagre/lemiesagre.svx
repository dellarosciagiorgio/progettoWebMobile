<script>
    import { onMount } from "svelte";
    import { browser } from "$app/environment";
    import "bootstrap/dist/css/bootstrap.min.css";
    
    import "./lemiesagre.css";

    let sagre = [];
    let isLoading = true;
    let error = null;
    let showAddModal = false;
    let showEditModal = false;
    let showDeleteModal = false;
    let currentSagra = null;
    let formData = {
        nome: "",
        descrizione: "",
        luogo: ""
    };

    function getCookie(name) {
        if (!browser)
            return null;
        const nameEQ = name + "=";
        const ca = document.cookie.split(";");
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == " ")
                c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0)
                return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function formatDate(isoDate) {
        if (!isoDate)
            return "";
        const date = new Date(isoDate);
        return `${date.getDate().toString().padStart(2, "0")}/${(date.getMonth() + 1).toString().padStart(2, "0")}/${date.getFullYear()}`;
    }

    function formatDateForInput(dateString) {
        if (!dateString)
            return "";
        if (dateString.includes("-"))
            return dateString;
        const parts = dateString.split("/");
        if (parts.length !== 3)
            return "";
        return `${parts[2]}-${parts[1].padStart(2, "0")}-${parts[0].padStart(2, "0")}`;
    }

    function normalizzaDatiSagre(sagreData) {
        return sagreData.map(sagra => {
            console.log("Struttura sagra originale:", JSON.stringify(sagra));
            const normalizedSagra = {
                idSagra: sagra.idSagra,
                nomeSagra: sagra.nomeSagra,
                descrizione: sagra.descrizione,
                luogo: sagra.luogo
            };
            console.log("Sagra normalizzata:", JSON.stringify(normalizedSagra));
            return normalizedSagra;
        });
    }

    async function loadMySagre() {
        isLoading = true;
        error = null;
        try {
            const token = getCookie("authToken");
            if (!token)
                throw new Error("Token di autenticazione non trovato");
            const response = await fetch(`${import.meta.env.VITE_API_URL}sagre/mySagre`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                }
            });

            const responseText = await response.text();
            if (!responseText)
                throw new Error("Il server ha restituito una risposta vuota");
            console.log("Risposta dal server (raw):", responseText);
            let data;
            try {
                data = JSON.parse(responseText);
            } catch (jsonError) {
                throw new Error(`Errore nel parsing della risposta: ${responseText.substring(0, 100)}...`);
            }
            if (!response.ok)
                throw new Error(data && data.message ? data.message : `Errore durante il recupero delle sagre: ${response.status}`);
            console.log("Struttura dati ricevuti:", data);
            let sagreData = [];
            if (data.success === true && Array.isArray(data.data))
                sagreData = data.data;
            else if (Array.isArray(data))
                sagreData = data;
            else if (typeof data === "object" && data !== null)
                sagreData = [data];
            sagre = normalizzaDatiSagre(sagreData);
            console.log("Sagre normalizzate:", sagre);
        } catch (err) {
            console.error("Errore nel caricamento delle sagre:", err);
            error = err.message;
            sagre = [];
        } finally {
            isLoading = false;
        }
    }

    async function addSagra() {
        try {
            const token = getCookie("authToken");
            if (!token)
                throw new Error("Token di autenticazione non trovato");
            let sagraNome, sagraDescrizione, sagraLuogo;
            if (formData) {
                sagraNome = formData.nome;
                sagraDescrizione = formData.descrizione;
                sagraLuogo = formData.luogo;
            } else throw new Error("Dati non validi");
            const apiUrl = `${import.meta.env.VITE_API_URL}sagra`;
            const response = await fetch(apiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({
                    nomeSagra: sagraNome,
                    descrizione: sagraDescrizione,
                    luogo: sagraLuogo
                })
            });
            if (!response.ok) {
                let errorMessage = "Sagra non aggiunta. Status: " + response.status;
                try {
                    const errorData = await response.json();
                    if (errorData && errorData.message)
                        errorMessage += " - " + errorData.message;
                } catch (parseError) {
                    console.error("Error parsing JSON error response:", parseError);
                }
                throw new Error(errorMessage);
            }
            const data = await response.json();
            await loadMySagre();
            showAddModal = false;
            console.log(data);
        } catch (err) {
            console.error("Errore nell'aggiunta della sagra:", err);
            error = err.message;
        }
    }

    async function updateSagra(SagraToUpdate) {
        try {
            console.log("SAGRA TO UP: ",SagraToUpdate);
            const token = getCookie("authToken");
            if (!token)
                throw new Error("Token di autenticazione non trovato");
            console.log("Dati da inviare per aggiornamento:", formData);

            if (formData) {
                SagraToUpdate.nomeSagra = formData.nome;
                SagraToUpdate.descrizione = formData.descrizione;
                SagraToUpdate.luogo = formData.luogo;

                console.log("Nome:", SagraToUpdate.nomeSagra);
                console.log("Descrizione:", SagraToUpdate.descrizione);
                console.log("Luogo:", SagraToUpdate.luogo);    
            } else throw new Error("Dati non validi");
            const response = await fetch(`${import.meta.env.VITE_API_URL}sagra`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({
                    idSagra: SagraToUpdate.idSagra,
                    nomeSagra: SagraToUpdate.nomeSagra,
                    descrizione: SagraToUpdate.descrizione,
                    luogo: SagraToUpdate.luogo
                })
            });
            if (!response.ok) {
                let errorMessage = "Sagra non aggiunta. Status: " + response.status;
                try {
                    const errorData = await response.json();
                    if (errorData && errorData.message)
                        errorMessage += " - " + errorData.message;
                } catch (parseError) {
                    console.error("Error parsing JSON error response:", parseError);
                }
                throw new Error(errorMessage);
            }
            const data = await response.json();
            await loadMySagre();
            showEditModal = false;
            console.log(data);
        } catch (err) {
            console.error("Errore nell'aggiunta della sagra:", err);
            error = err.message;
        }
    }

    async function deleteSagra() {
        try {
            const token = getCookie("authToken");
            if (!token)
                throw new Error("Token di autenticazione non trovato");
            const response = await fetch(`${import.meta.env.VITE_API_URL}sagra`, {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({ IdSagra: currentSagra.idSagra })
            });
            const responseText = await response.text();
            if (!responseText) {
                if (response.ok) {
                    console.log("Sagra eliminata con successo (risposta vuota)");
                    await loadMySagre();
                    showDeleteModal = false;
                    return;
                } throw new Error(`Errore durante l'eliminazione della sagra: ${response.status}`);
            }
            console.log("Risposta dal server (raw):", responseText);
            let data;
            try {
                data = JSON.parse(responseText);
            } catch (jsonError) {
                console.error("Errore nel parsing JSON:", jsonError);
                if (response.ok) {
                    console.log("Sagra eliminata con successo (risposta non-JSON)");
                    await loadMySagre();
                    showDeleteModal = false;
                    return;
                }
                throw new Error(`Errore nel parsing della risposta: ${responseText.substring(0, 100)}...`);
            }
            if (!response.ok) {
                const errorMsg = data && data.message ? data.message : `Errore durante l'eliminazione della sagra: ${response.status}`;
                throw new Error(errorMsg);
            }
            console.log("Sagra eliminata con successo:", data);
            await loadMySagre();
            showDeleteModal = false;
        } catch (err) {
            console.error("Errore nell'eliminazione della sagra:", err);
            error = err.message;
        }
    }

    function openEditModal(sagra) {
        currentSagra = sagra;
        formData = {
            nome: sagra.nomeSagra,
            descrizione: sagra.descrizione,
            luogo: sagra.luogo
        };
        showEditModal = true;
    }

    function openDeleteModal(sagra) {
        currentSagra = sagra;
        showDeleteModal = true;
    }

    function resetForm() {
        formData = {
            nome: "",
            descrizione: "",
            luogo: ""
        };
    }

    function viewEvents(sagraId) {
        window.location.href = `/Sagre/Sagra?id=${sagraId}`;
    }

    onMount(() => {
        if (!browser) return;
        const token = getCookie("authToken");
        const userRole = getCookie("userRole");
        if (!token || userRole !== "Organizzatore") {
            window.location.href = "/Home";
            return;
        }
        loadMySagre();
    });
</script>

<svelte:head>
    <title>Le Mie Sagre | Village Festival</title>
</svelte:head>

<div class="container mt-4">
    <div class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1>Le Mie Sagre</h1>
        <button class="btn btn-add-sagra" on:click={() => { resetForm(); showAddModal = true;}}>
            <span class="add-icon">+</span> Aggiungi Sagra
        </button>
    </div>
    {#if error}
        <div class="alert alert-danger">
            {error}
        </div>
    {/if}
    {#if isLoading}
        <div class="d-flex justify-content-center mt-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento...</span>
            </div>
        </div>
    {:else if sagre.length === 0}
        <div class="alert alert-info">
            Non hai ancora creato nessuna sagra. Clicca su "Aggiungi Sagra" per iniziare.
        </div>
    {:else}
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            {#each sagre as sagra}
                <div class="col">
                    <div class="card h-100 event-card">
                        <img src="/imgs/sagra.jpg" class="card-img-top sagra-image" alt="Immagine della sagra"/>
                        <div class="card-body">
                            <h5 class="card-title">{sagra.nomeSagra}</h5>
                            <p class="card-text description">{sagra.descrizione}</p>
                            <p class="card-text location">
                                <span class="location-prefix">Luogo:</span>{sagra.luogo}
                            </p>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-events" on:click={() => (window.location.href = `/Sagre/Sagra?id=${sagra.idSagra}`)}>
                                    Eventi
                                </button>
                                <div class="action-buttons">
                                    <button class="btn btn-edit" on:click={() => openEditModal(sagra)} title="Modifica sagra">
                                        <span class="edit-icon">✏️</span>
                                    </button>
                                    <button class="btn btn-delete" on:click={() => openDeleteModal(sagra)} title="Elimina sagra">
                                        <span class="delete-icon">🗑️</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {/each}
        </div>
    {/if}
</div>
{#if showAddModal}
    <div class="modal-overlay">
        <div class="modal-wrapper">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Aggiungi Nuova Sagra</h5>
                    <button type="button" class="btn-close" aria-label="btn-addSagra" on:click={() => (showAddModal = false)}></button>
                </div>
                <div class="modal-body">
                    <form on:submit|preventDefault={addSagra}>
                        <div class="mb-3">
                            <label for="nome" class="form-label">Nome*</label>
                            <input type="text" class="form-control" id="nome" bind:value={formData.nome} required/>
                        </div>
                        <div class="mb-3">
                            <label for="descrizione" class="form-label">Descrizione*</label>
                            <textarea class="form-control" id="descrizione" rows="3" bind:value={formData.descrizione} required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="luogo" class="form-label">Luogo*</label>
                            <input type="text" class="form-control" id="luogo" bind:value={formData.luogo} required/>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" on:click={() => (showAddModal = false)}>Annulla</button>
                            <button type="submit" class="btn btn-submit" > Salva </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{/if}

{#if showEditModal && currentSagra}
    <div class="modal-overlay">
        <div class="modal-wrapper">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modifica Sagra</h5>
                    <button type="button" class="btn-close" aria-label="btn-editSagra" on:click={() => (showEditModal = false)}></button>
                </div>
                <div class="modal-body">
                    <form on:submit|preventDefault={() => updateSagra(currentSagra)}>
                        <div class="mb-3">
                            <label for="edit-nome" class="form-label">Nome*</label>
                            <textarea class="form-control" id="edit-nome" rows="3" bind:value={formData.nome} required></textarea>
                            
                        </div>
                        <div class="mb-3">
                            <label for="edit-descrizione" class="form-label">Descrizione*</label>
                            <textarea class="form-control" id="edit-descrizione" rows="3" bind:value={formData.descrizione} required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="edit-luogo" class="form-label">Luogo*</label>
                            <textarea class="form-control" id="edit-luogo" rows="3" bind:value={formData.luogo} required></textarea>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" on:click={() => (showEditModal = false)}>Annulla</button>
                            <button type="submit" class="btn btn-submit">
                                Aggiorna
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{/if}

{#if showDeleteModal && currentSagra}
    <div class="modal-overlay">
        <div class="modal-wrapper delete-modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Conferma Eliminazione</h5>
                    <button type="button" class="btn-close" aria-label="btn-deleteSagra" on:click={() => (showDeleteModal = false)}></button>
                </div>
                <div class="modal-body delete-modal-body">
                    <div class="delete-warning-icon">
                        <span class="warning-icon">⚠️</span>
                    </div>
                    <h4 class="delete-title">
                        Stai per eliminare la sagra "{currentSagra.nomeSagra}"
                    </h4>
                    <div class="delete-warning">
                        <p>Questa azione è <strong>irreversibile</strong> e comporterà
                            anche l'eliminazione di tutti gli eventi associati.</p>
                        <p>Sei sicuro di voler procedere?</p>
                    </div>
                </div>
                <div class="modal-footer delete-modal-footer">
                    <button type="button" class="btn btn-secondary" on:click={() => (showDeleteModal = false)}>Annulla</button>
                    <button type="button" class="btn btn-delete-confirm" on:click={deleteSagra}>
                        <span class="trash-icon">🗑️</span>
                        Elimina Sagra
                    </button>
                </div>
            </div>
        </div>
    </div>
{/if}