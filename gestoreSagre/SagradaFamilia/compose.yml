services:
  server:
#    build:
#      context: .
#      dockerfile: Dockerfile
#      target: final  # Specifica il target di build
    image: mattiadispigno/sagradafamilia-server:latest
    platform: ${MY_PLATFORM:-linux/amd64}
    environment:
      AllowedIpsConfig__AllowedIps: '["http://localhost:8080","http://localhost:8000","http://localhost:5173"]'
      ConnectionStrings__MyDbContext: ${DB_CONN_STRING}
      Jwt__Key: ${MY_SECRET}
      Jwt__Issuer: http://localhost:8080
      Jwt__Audience: http://localhost:8080
    ports:
      - 8080:8080
    depends_on:
      - sqlserver

  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    platform: ${MY_PLATFORM:-linux/amd64}
    container_name: ${SQL_CONT_NAME:-sqlserver}
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - MSSQL_PID=Developer
    ports:
      - 1433:1433
    volumes:
      - database_volume:/var/opt/mssql
    restart: always
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${SA_PASSWORD}
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 5s

  sqlserver.configurator:
    image: mcr.microsoft.com/mssql-tools
    platform: ${MY_PLATFORM:-linux/amd64}
    container_name: sqlserver.configurator
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    depends_on:
      sqlserver:
        condition: service_healthy
    command: >
      bash -c '
      /opt/mssql-tools/bin/sqlcmd -S ${SQL_CONT_NAME:-sqlserver} -U sa -P ${SA_PASSWORD} -d master -i docker-entrypoint-initdb.d/init.sql;
      echo "All done!";
      '
volumes:
  database_volume: